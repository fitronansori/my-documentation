<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class QueryBuilderTest extends TestCase
{
    protected function setUp():void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        DB::delete('delete from categories');
    }

    public function testInsert()
    {
        DB::table('categories')->insert([
            'id' => 'GADGET',
            'name' => 'Gadget',
            'description' => 'Gadget Category',
            'created_at' => now()
        ]);

        $this->assertDatabaseHas('categories', [
            'id' => 'GADGET',
            'name' => 'Gadget',
            'description' => 'Gadget Category',
        ]);
    }

    public function testUpdate()
    {
        DB::table('categories')->insert([
            'id' => 'GADGET',
            'name' => 'Gadget',
            'description' => 'Gadget Category',
            'created_at' => now()
        ]);

        DB::table('categories')->where('id', 'GADGET')->update([
            'name' => 'Gadget Update',
            'description' => 'Gadget Category Update',
        ]);

        $this->assertDatabaseHas('categories', [
            'id' => 'GADGET',
            'name' => 'Gadget Update',
            'description' => 'Gadget Category Update',
        ]);
    }

    // test Query Builder select
    public function testSelect()
    {
        DB::table('categories')->insert([
            'id' => 'GADGET',
            'name' => 'Gadget',
            'description' => 'Gadget Category',
            'created_at' => now()
        ]);

        $categories = DB::table('categories')->select('id', 'name', 'description')->first();
        $this->assertEquals('GADGET', $categories->id);
        $this->assertEquals('Gadget', $categories->name);
        $this->assertEquals('Gadget Category', $categories->description);

        foreach ($categories as $category) {
            echo $category . "\n";
        }
    }

    // test Query Builder where
    public function testWhere()
    {
        DB::table('categories')->insert([
            'id' => 'GADGET',
            'name' => 'Gadget',
            'description' => 'Gadget Category',
            'created_at' => now()
        ]);

        DB::table('categories')->insert([
            'id' => 'ELECTRONIC',
            'name' => 'Electronic',
            'description' => 'Electronic Category',
            'created_at' => now()
        ]);

        DB::table('categories')->insert([
            'id' => 'FASHION',
            'name' => 'Fashion',
            'description' => 'Fashion Category',
            'created_at' => now()
        ]);

        DB::table('categories')->insert([
            'id' => 'FOOD',
            'name' => 'Food',
            'description' => 'Food Category',
            'created_at' => now()
        ]);

        $categories = DB::table('categories')->where('id', 'GADGET')->first();
        $this->assertEquals('GADGET', $categories->id);
        $this->assertEquals('Gadget', $categories->name);
        $this->assertEquals('Gadget Category', $categories->description);

        $categories = DB::table('categories')->where('id', 'GADGET')->orWhere('id', 'ELECTRONIC')->get();
        $this->assertCount(2, $categories);
    }

}
